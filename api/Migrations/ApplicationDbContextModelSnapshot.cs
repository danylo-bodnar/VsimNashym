// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Avatar", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("text")
                        .HasColumnName("messageid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("MessageId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("avatar");
                });

            modelBuilder.Entity("api.Models.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("FromTelegramId")
                        .HasColumnType("bigint")
                        .HasColumnName("fromtelegramid");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long>("ToTelegramId")
                        .HasColumnType("bigint")
                        .HasColumnName("totelegramid");

                    b.HasKey("Id");

                    b.HasIndex("FromTelegramId", "ToTelegramId")
                        .IsUnique();

                    b.ToTable("connections");
                });

            modelBuilder.Entity("api.Models.ProfilePhoto", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("text")
                        .HasColumnName("messageid");

                    b.Property<int>("SlotIndex")
                        .HasColumnType("integer")
                        .HasColumnName("slotindex");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("profilephoto");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("displayname");

                    b.Property<List<string>>("Interests")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("interests");

                    b.Property<List<string>>("Languages")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("languages");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry(Point, 4326)")
                        .HasColumnName("location");

                    b.Property<List<string>>("LookingFor")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("lookingfor");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegramid");

                    b.HasKey("Id");

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("api.Models.Avatar", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithOne("Avatar")
                        .HasForeignKey("api.Models.Avatar", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.ProfilePhoto", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany("ProfilePhotos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Navigation("Avatar")
                        .IsRequired();

                    b.Navigation("ProfilePhotos");
                });
#pragma warning restore 612, 618
        }
    }
}
